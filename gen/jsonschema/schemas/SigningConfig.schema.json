{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "$ref": "#/definitions/SigningConfig",
    "definitions": {
        "SigningConfig": {
            "properties": {
                "mediaType": {
                    "type": "string",
                    "description": "MUST be application/vnd.dev.sigstore.signingconfig.v0.1+json or application/vnd.dev.sigstore.signingconfig.v0.2+json"
                },
                "caUrl": {
                    "type": "string",
                    "description": "Deprecated: Use certificate_authority_urls A URL to a Fulcio-compatible CA, capable of receiving Certificate Signing Requests (CSRs) and responding with issued certificates. This URL **MUST** be the \"base\" URL for the CA, which clients should construct an appropriate CSR endpoint on top of. For example, if `ca_url` is `https://example.com/ca`, then the client **MAY** construct the CSR endpoint as `https://example.com/ca/api/v2/signingCert`."
                },
                "oidcUrl": {
                    "type": "string",
                    "description": "Deprecated: Use openid_connect_provider_urls A URL to an OpenID Connect identity provider. This URL **MUST** be the \"base\" URL for the OIDC IdP, which clients should perform well-known OpenID Connect discovery against."
                },
                "tlogUrls": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "Deprecated: Use rekor_log_urls One or more URLs to Rekor-compatible transparency logs. Each URL **MUST** be the \"base\" URL for the transparency log, which clients should construct appropriate API endpoints on top of."
                },
                "tsaUrls": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "Deprecated: Use timestamp_authority_urls One or more URLs to RFC 3161 Time Stamping Authorities (TSA). Each URL **MUST** be the **full** URL for the TSA, meaning that it should be suitable for submitting Time Stamp Requests (TSRs) to via HTTP, per RFC 3161."
                },
                "certificateAuthorityUrls": {
                    "items": {
                        "$ref": "#/definitions/dev.sigstore.trustroot.v1.Service"
                    },
                    "additionalProperties": false,
                    "type": "array",
                    "description": "URLs to Fulcio-compatible CAs, capable of receiving Certificate Signing Requests (CSRs) and responding with issued certificates. These URLs **MUST** be the \"base\" URL for the CAs, which clients should construct an appropriate CSR endpoint on top of. For example, if a CA URL is `https://example.com/ca`, then the client **MAY** construct the CSR endpoint as `https://example.com/ca/api/v2/signingCert`. Clients must select only Service with the highest API version that the client is compatible with and that is within its validity period. Clients should select the first Service that meets this requirement."
                },
                "openidConnectProviderUrls": {
                    "items": {
                        "$ref": "#/definitions/dev.sigstore.trustroot.v1.Service"
                    },
                    "additionalProperties": false,
                    "type": "array",
                    "description": "URLs to OpenID Connect identity providers. These URLs **MUST** be the \"base\" URLs for the OIDC IdPs, which clients should perform well-known OpenID Connect discovery against. Clients must select only Service with the highest API version that the client is compatible with and that is within its validity period. Clients should select the first Service that meets this requirement."
                },
                "rekorLogUrls": {
                    "items": {
                        "$ref": "#/definitions/dev.sigstore.trustroot.v1.Service"
                    },
                    "additionalProperties": false,
                    "type": "array",
                    "description": "URLs to Rekor-compatible transparency logs. These URL **MUST** be the \"base\" URLs for the transparency logs, which clients should construct appropriate API endpoints on top of. Clients must select ALL Services with the highest API version that the client is compatible with and that are within its validity period."
                },
                "timestampAuthorityUrls": {
                    "items": {
                        "$ref": "#/definitions/dev.sigstore.trustroot.v1.Service"
                    },
                    "additionalProperties": false,
                    "type": "array",
                    "description": "URLs to RFC 3161 Time Stamping Authorities (TSA). These URLs **MUST** be the **full** URL for the TSA, meaning that it should be suitable for submitting Time Stamp Requests (TSRs) to via HTTP, per RFC 3161. Clients must select ALL Services with the highest API version that the client is compatible with and that are within its validity period."
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Signing Config",
            "description": "SigningConfig represents the trusted entities/state needed by Sigstore signing. In particular, it primarily contains service URLs that a Sigstore signer may need to connect to for the online aspects of signing."
        },
        "dev.sigstore.common.v1.TimeRange": {
            "properties": {
                "start": {
                    "type": "string",
                    "format": "date-time"
                },
                "end": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "oneOf": [
                {
                    "required": [
                        "end"
                    ]
                }
            ],
            "title": "Time Range",
            "description": "The time range is closed and includes both the start and end times, (i.e., [start, end]). End is optional to be able to capture a period that has started but has no known end."
        },
        "dev.sigstore.trustroot.v1.Service": {
            "properties": {
                "url": {
                    "type": "string",
                    "description": "URL of the service. Must include scheme and authority. May include path."
                },
                "majorApiVersion": {
                    "type": "integer",
                    "description": "Specifies the major API version. A value of 0 represents a service that has not yet been released."
                },
                "validFor": {
                    "$ref": "#/definitions/dev.sigstore.common.v1.TimeRange",
                    "additionalProperties": false,
                    "description": "Validity period of a service. A service that has only a start date should be considered the most recent instance of that service, but the client must not assume there is only one valid instance. The TimeRange should be considered valid *inclusive* of the endpoints."
                }
            },
            "additionalProperties": false,
            "type": "object",
            "title": "Service",
            "description": "Service represents an instance of a service that is a part of Sigstore infrastructure. Clients must use the API version hint to determine the service with the highest API version that the client is compatible with. Clients must also only connect to services within the specified validity period and that has the newest validity start date."
        }
    }
}